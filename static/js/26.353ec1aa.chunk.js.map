{"version":3,"sources":["components/Button/Button.js","components/Broker/BrokerBind.js","mobile/pages/Broker/BrokerBind.js"],"names":["Button","btnText","className","disabled","click","afterClick","checkApprove","wallet","spec","lang","useState","status","setStatus","isApproved","setIsApproved","pending","setPending","buttonText","setbuttonText","loadRef","useRef","onClick","a","beforeAction","afterAction","current","style","display","loadApproveStatus","detail","account","pool","bTokenId","res","approve","success","alert","useEffect","ref","marginRight","inject","observer","address","setAddress","isBind","setIsBind","BindBroker","undefined","bindAddress","toLocaleLowerCase","length","indexOf","setBroker","chainId","console","log","getBroker","path","fetchRestApi","data","broker_address","type","placeholder","value","onChange","event","target","addressChange","Bind"],"mappings":"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","file":"static/js/26.353ec1aa.chunk.js","sourcesContent":["import {useState,useRef,useEffect} from 'react';\r\nexport default function Button({btnText,className,disabled,click,afterClick,checkApprove,wallet,spec,lang}){\r\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\r\n  const [isApproved, setIsApproved] = useState(true);\r\n  const [pending, setPending] = useState(false);\r\n  const [buttonText, setbuttonText] = useState(btnText)\r\n  const loadRef = useRef(null)\r\n\r\n  const onClick = async () => {\r\n    if(status !== 'enabled') {\r\n      return ;\r\n    }\r\n    beforeAction()\r\n    const result = await click();    \r\n    if(result){\r\n      afterClick && afterClick()\r\n    } \r\n    afterAction()\r\n  }\r\n\r\n  const beforeAction = ()  => {\r\n    setStatus('disabled')\r\n    setPending(true);\r\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\r\n  }\r\n\r\n  const afterAction = () => {\r\n    loadRef.current && (loadRef.current.style.display = 'none')\r\n    setStatus('enabled')\r\n    setPending(false);\r\n  }\r\n\r\n  const loadApproveStatus = async () => {\r\n    if(checkApprove && wallet && wallet.detail.account){\r\n      const res = await wallet.isApproved(spec.pool,spec.bTokenId)\r\n      setIsApproved(res);\r\n    }\r\n  }\r\n  const approve = async () => {\r\n    beforeAction();\r\n    const res = await wallet.approve(spec.pool,spec.bTokenId);\r\n    if(res.success){\r\n      setIsApproved(true);\r\n    } else {\r\n      setIsApproved(false)\r\n      alert(lang['approve-failed'])\r\n    }\r\n    afterAction();\r\n  }\r\n\r\n  const action = () => {\r\n    if(isApproved){\r\n      onClick();\r\n    } else {\r\n      approve();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadApproveStatus();\r\n    return () => {};\r\n  }, [wallet,spec,checkApprove]);\r\n\r\n  useEffect(() => {\r\n    if(btnText){\r\n      setbuttonText(btnText)\r\n    }\r\n    return () => {\r\n    }\r\n  }, [btnText])\r\n\r\n  return(\r\n    <button className={className} onClick={action} >\r\n        <span className='btn-loading-wrap'>\r\n          <span ref={loadRef}\r\n            className='spinner spinner-border spinner-border-sm'\r\n            style={{display : 'none' ,marginRight : '2'}}>\r\n          </span>\r\n        </span>\r\n          {pending ? lang['pending'] : (isApproved ? buttonText : lang['approve'])  }\r\n        </button>\r\n  )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {inject,observer} from 'mobx-react'\r\nimport Button from '../Button/Button';\r\nimport {\r\n  fetchRestApi,\r\n  setBroker,\r\n} from \"../../lib/web3js/indexV2\";\r\nfunction BrokerBind({wallet={},lang}){\r\n  const [address,setAddress] = useState()\r\n  const [isBind,setIsBind] = useState(true)\r\n  \r\n  const hasConnectWallet = () => wallet && wallet.detail && wallet.detail.account\r\n\r\n  const BindBroker = async ()=>{\r\n    if( hasConnectWallet()){\r\n      if(address === undefined){\r\n        alert(lang['please-enter-address']) \r\n        return;\r\n      }\r\n      let bindAddress = address.toLocaleLowerCase();\r\n      if(bindAddress.length != 42 || bindAddress.indexOf('0x') != 0){\r\n        alert(lang['please-enter-a-correct-address']) \r\n        return;\r\n      }\r\n      if(bindAddress === wallet.detail.account){\r\n        alert(lang['brokder-addr-cannot-be-the-same-as-trader']) \r\n        return;\r\n      }\r\n      if(isBind){\r\n        alert(lang['cannot-bind-twice']) \r\n        return;\r\n      }\r\n      let res = await setBroker(wallet.detail.chainId,wallet.detail.account,address)\r\n      console.log(res)\r\n      if(!res.success){\r\n        alert(lang['bind-faild'])\r\n      }\r\n      if(res.success){\r\n        setIsBind(true)\r\n      }\r\n    }\r\n  }\r\n\r\n  const getBroker = async() =>{\r\n    let path = `/broker/${wallet.detail.account}/get_broker`\r\n    let res =  await fetchRestApi(path)\r\n    if(res.data){\r\n      if(res.data.length){\r\n        setIsBind(true)\r\n        setAddress(res.data[0].broker_address)\r\n      }else{\r\n        setIsBind(false)\r\n      }\r\n    }else{\r\n      setIsBind(false)\r\n    }\r\n  }\r\n\r\n  const addressChange = event =>{\r\n    let {value} = event.target\r\n    setAddress(value)\r\n  }\r\n  useEffect(()=>{\r\n    getBroker();\r\n  },[wallet.detail])\r\n  return(\r\n    <div className='broker-bind'>\r\n      <div className='header'>\r\n        {lang['brokers-address']}\r\n      </div>\r\n      <div className='bind-input'>\r\n        <div className='address'>\r\n          <input className='address-input' type='text'\r\n          placeholder={lang['address']}\r\n          value={address}   \r\n          onChange={event =>  addressChange(event) }\r\n          />\r\n        </div>\r\n        <div className='bind-button'>\r\n          <Button className='btn' btnText={lang['bind']} lang={lang} click={BindBroker} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('wallet')(observer(BrokerBind))","import BrokerBind from '../../../components/Broker/BrokerBind'\r\nimport \"./Bind.less\"\r\nexport default function Bind({lang}){\r\n  return (\r\n    <BrokerBind lang={lang}/>\r\n  )\r\n}"],"sourceRoot":""}